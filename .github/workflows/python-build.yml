
name: Python Build and Test

env:
  APP_NAME: cinema
  APP_VERSION: 0.0.1
  # placeholder for readability, override later 

# simple git flow for single developer with linear development  
# release with tag = pyproject.toml versio = $APP_VERSION
on:
  push:
    branches:
      - "*"
    tags:
      - "v*.*.*"
  workflow_dispatch : {}

permissions:
  contents: write
  # need write to push to release artifact 
  packages: write
  # attestations: write
  id-token: write
  # for ghrc 

jobs:
  BuildAndTest:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build 
        pip install -r requirements.txt

    - name: Build package
      run: python -m build

    - name: project_name
      run: |
        APP_NAME=$(python -c 'import tomllib; print(tomllib.load(open("pyproject.toml", "rb"))["project"]["name"])')
        APP_VERSION=$(python -c 'import tomllib; print(tomllib.load(open("pyproject.toml", "rb"))["project"]["version"])')
        GHCR_REGISTRY=ghcr.io/${{ github.actor }}/$APP_NAME
        { echo -e "APP_NAME=$APP_NAME";
        echo -e "APP_VERSION=$APP_VERSION";
        echo -e "GHCR_REGISTRY=ghcr.io/${{ github.actor }}/$APP_NAME";
        }

    - name: Unit Test with pytest
      run: |
        pip install pytest 
        python -m pytest -v --cov

    - name: End to End Test
      run: |
        echo "Test locally"
        python -m pytest -s tests/test_booking_end_to_end.py

    - name: Build Docker
      run: |
        docker build . -t  ${{ env.APP_NAME }}:${{ github.sha }} \
         --build-arg APP_VERSION=${{ env.APP_VERSION }} --build-arg APP_NAME=${{ env.APP_NAME }}
       
    # - name: Run Trivy vulnerability scanner
    #   uses: aquasecurity/trivy-action@0.20.0
    #   with:
    #     image-ref: ${{ env.APP_NAME }}:${{ github.sha }} 
    #     format: 'table'
    #     exit-code: '1'
    #     ignore-unfixed: true
    #     vuln-type: 'os,library'
    #     severity: 'CRITICAL,HIGH'      
    

    - name: Upload Build Artifact
      # if push to main or create release
      if: |
        github.ref != 'refs/heads/main' || github.event_name == 'workflow_dispatch' || 
        startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v4.3.3
      with:
        name: ${{ env.APP_NAME }}-python-module
        path: dist/*
        if-no-files-found: error
        overwrite: true


    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: 'ghcr.io'
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push to ghcr.io
      run: |
        image=${{ env.GHCR_REGISTRY }}:${{ github.sha }}
        docker image tag ${{ env.APP_NAME }}:${{ github.sha }} ${image}
        docker push ${image}


    # Upload to release, reusable workflow. 
    - name: Upload
      if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      uses: "./.github/workflows/artifact-release.yml"

    #output for passing to next job    
    outputs:
      image: ${{ steps.ecr_push.outputs.image}}
      app: ${{ steps.ecr_push.outputs.app}}
